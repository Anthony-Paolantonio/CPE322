Last login: Sat May 14 14:46:36 on ttys000
anthonypaolantonio@Anthonys-MBP-4 ~ % cd ~/iot/lesson10
anthonypaolantonio@Anthonys-MBP-4 lesson10 % cat hash_value.py
"""
https://docs.python.org/3/using/cmdline.html#envvar-PYTHONHASHSEED
If PYTHONHASHSEED is not set or set to random, a random value is used to to seed the hashes of str and bytes objects.
If PYTHONHASHSEED is set to an integer value, it is used as a fixed seed for generating the hash() of the types covered by the hash randomization.
Its purpose is to allow repeatable hashing, such as for selftests for the interpreter itself, or to allow a cluster of python processes to share hash values.
The integer must be a decimal number in the range [0,4294967295]. Specifying the value 0 will disable hash randomization.

https://www.programiz.com/python-programming/methods/built-in/hash
hash(object) returns the hash value of the object (if it has one). Hash values are integers.
They are used to quickly compare dictionary keys during a dictionary lookup.
Numeric values that compare equal have the same hash value even if they are of different types, as is the case for 1 and 1.0.
For objects with custom __hash__() methods, note that hash() truncates the return value based on the bit width of the host machine.
"""

# hash for integer unchanged
print('The hash for 1 is:', hash(1))

# hash for decimal
print('The hash for 1.0 is:',hash(1.0))
print('The hash for 3.14 is:',hash(3.14))

# hash for string
print('The hash for Python is:', hash('Python'))

# hash for a tuple of vowels
vowels = ('a', 'e', 'i', 'o', 'u')
print('The hash for a tuple of vowels is:', hash(vowels))

# hash for a custom object
class Person:
    def __init__(self, age, name):
        self.age = age
        self.name = name
    def __eq__(self, other):
        return self.age == other.age and self.name == other.name
    def __hash__(self):
        return hash((self.age, self.name))
person = Person(23, 'Adam')
print('The hash for an object of person is:', hash(person))
anthonypaolantonio@Anthonys-MBP-4 lesson10 % python3 hash_value.py
The hash for 1 is: 1
The hash for 1.0 is: 1
The hash for 3.14 is: 322818021289917443
The hash for Python is: -7404735621332771475
The hash for a tuple of vowels is: 4233941133896234841
The hash for an object of person is: -3192768219711274115
anthonypaolantonio@Anthonys-MBP-4 lesson10 % python3 hash_value.py
The hash for 1 is: 1
The hash for 1.0 is: 1
The hash for 3.14 is: 322818021289917443
The hash for Python is: -1300646194733748811
The hash for a tuple of vowels is: 2193617128696481458
The hash for an object of person is: 7960792351693439632
anthonypaolantonio@Anthonys-MBP-4 lesson10 % python3
Python 3.9.12 (main, May  8 2022, 18:05:47) 
[Clang 13.1.6 (clang-1316.0.21.2)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> import hashlib
>>> m = hashlib.sha256(b"hello, world")
>>> m.hexdigest()
'09ca7e4eaa6e8ae9c7d261167129184883644d07dfba7cbfbc4c8a2e08360d5b'
>>> m.digest_size
32
>>> m.block_size
64
>>> exit()
anthonypaolantonio@Anthonys-MBP-4 lesson10 % cat snakecoin.py
# Gerald Nash, "Let's build the tiniest blockchain in less than 50 lines of Python"
import hashlib as hasher
import datetime as date

# Define what a Snakecoin block is
class Block:
  def __init__(self, index, timestamp, data, previous_hash):
    self.index = index
    self.timestamp = timestamp
    self.data = data
    self.previous_hash = previous_hash
    self.hash = self.hash_block()
  
  def hash_block(self):
    sha = hasher.sha256()
    sha.update(str(self.index).encode() + str(self.timestamp).encode() + str(self.data).encode() + str(self.previous_hash).encode())
    return sha.hexdigest()

# Generate genesis block
def create_genesis_block():
  # Manually construct a block with
  # index zero and arbitrary previous hash
  return Block(0, date.datetime.now(), "Genesis Block", "0")

# Generate all later blocks in the blockchain
def next_block(last_block):
  this_index = last_block.index + 1
  this_timestamp = date.datetime.now()
  this_data = "Hey! I'm block " + str(this_index)
  this_hash = last_block.hash
  return Block(this_index, this_timestamp, this_data, this_hash)

# Create the blockchain and add the genesis block
blockchain = [create_genesis_block()]
previous_block = blockchain[0]

# How many blocks should we add to the chain
# after the genesis block
num_of_blocks_to_add = 20

# Add blocks to the chain
for i in range(0, num_of_blocks_to_add):
  block_to_add = next_block(previous_block)
  blockchain.append(block_to_add)
  previous_block = block_to_add
  # Tell everyone about it!
  print("Block #{} has been added to the blockchain!".format(block_to_add.index))
  print("Hash: {}\n".format(block_to_add.hash))
anthonypaolantonio@Anthonys-MBP-4 lesson10 % python3 snakecoin.py
Block #1 has been added to the blockchain!
Hash: bd1af69eaeddb408756a95609f7368db202ebab16b11891d400c5e232fa1cbe3

Block #2 has been added to the blockchain!
Hash: c21fd18e04a8e01db828c2a8218b0ec9450539cb42328910ed406856eb24baa7

Block #3 has been added to the blockchain!
Hash: ebde7d55284db5d2716c41c5532ffb4577fca1b98159232e004d91cf1430c9b5

Block #4 has been added to the blockchain!
Hash: 42ba53b24bbc13eed6ce0b40ccd5a9e026afb7911d42bb78d4b5ffe840e7a376

Block #5 has been added to the blockchain!
Hash: ab6bfe1e1412411dbcb878df81038b1b0b849f9baf8cdd9bcd792ded7fe6c8b5

Block #6 has been added to the blockchain!
Hash: e144ed9c924585e257e38b3db2f8f0db313ace290f0e1193e7a4f58a0d609dee

Block #7 has been added to the blockchain!
Hash: 29e4099d526225730765b2080b473eb207e88e4edea6a333e99ec03e73e93300

Block #8 has been added to the blockchain!
Hash: 616df1354ccf0eca0f317e0899eeee02f34b44e6313f78b3e730535c420eab63

Block #9 has been added to the blockchain!
Hash: 6277fcc65db30b5cf82bf59eac1b4d84f5c8f4f24c2f2863f75c4bff8846babb

Block #10 has been added to the blockchain!
Hash: b0f7b815b1d6e7a94fe6f57350643db833074d57dc8fb75c3a902871e9d57ea0

Block #11 has been added to the blockchain!
Hash: bc1e5d18b97513ce7095c903cacd0145d228b0bcdce52fa688971bfe320ef362

Block #12 has been added to the blockchain!
Hash: 57fe70aaf77fa3ad466db840432837f06cc239f3f3a672250462d4aa45773833

Block #13 has been added to the blockchain!
Hash: c4ba7f85368b3df876dd1c2a4d7ac7d00ba3b961c25aad44a69b931175360182

Block #14 has been added to the blockchain!
Hash: f34e9f6c0c085bf0608053d848ec5c93f009d0e7d7c6574efae367d9d4f7194c

Block #15 has been added to the blockchain!
Hash: dd735af4335e253d841f7d3aff870e071197707ee9e826fa24c81a0780319f48

Block #16 has been added to the blockchain!
Hash: aff79dfa5d70de6997523e9e38823b6ce17a06ab11c53135a5ee0e23713e66ac

Block #17 has been added to the blockchain!
Hash: b01550a5929720f1e01d2134ffafe3be0e46905707b8aeb243543129b23a09db

Block #18 has been added to the blockchain!
Hash: 69f04c080f4a5a121c475f3044400b2d9ba1b2c1ec4e7b1826007636193c378f

Block #19 has been added to the blockchain!
Hash: fcbc0ca2dc3f88526eba762ef87c3a2566fd18c2c518bfd266d6c82021b6280a

Block #20 has been added to the blockchain!
Hash: 385fd610bbe02743f9cad565fc7056f8b64e51cc0ef74fe1210d4df59e2504b1

anthonypaolantonio@Anthonys-MBP-4 lesson10 % cat snakecoin-server-full-code.py
# Gerald Nash, "Let’s Make the Tiniest Blockchain Bigger Part 2: With More Lines of Python"
# Referred to https://www.pythonanywhere.com/forums/topic/12382/ that fixed sha.update() TypeError: Unicode-objects must be encoded before hashing
# Running on http://127.0.0.1:5000/mine (Reload the page to mine and press CTRL+C to quit)
from flask import Flask
from flask import request
import json
import requests
import hashlib as hasher
import datetime as date
from flask import send_from_directory
import os
node = Flask(__name__)

# Define what a Snakecoin block is
class Block:
  def __init__(self, index, timestamp, data, previous_hash):
    self.index = index
    self.timestamp = timestamp
    self.data = data
    self.previous_hash = previous_hash
    self.hash = self.hash_block()
  
  def hash_block(self):
    sha = hasher.sha256()
#    sha.update(str(self.index) + str(self.timestamp) + str(self.data) + str(self.previous_hash))
    sha.update((str(self.index) + str(self.timestamp) + str(self.data) + str(self.previous_hash)).encode("utf-8"))
    return sha.hexdigest()

# Generate genesis block
def create_genesis_block():
  # Manually construct a block with
  # index zero and arbitrary previous hash
  return Block(0, date.datetime.now(), {
    "proof-of-work": 9,
    "transactions": None
  }, "0")

# A completely random address of the owner of this node
miner_address = "q3nf394hjg-random-miner-address-34nf3i4nflkn3oi"
# This node's blockchain copy
blockchain = []
blockchain.append(create_genesis_block())
# Store the transactions that
# this node has in a list
this_nodes_transactions = []
# Store the url data of every
# other node in the network
# so that we can communicate
# with them
peer_nodes = []
# A variable to deciding if we're mining or not
mining = True

@node.route("/")
def hello():
    return "SnakeCoin Server"

@node.route('/favicon.ico')
def favicon():
    return send_from_directory(os.path.join(node.root_path, 'static'),
                               'favicon.ico', 
                               mimetype='image/vnd.microsoft.icon')

@node.route('/txion', methods=['POST'])
def transaction():
  # On each new POST request,
  # we extract the transaction data
  new_txion = request.get_json()
  # Then we add the transaction to our list
  this_nodes_transactions.append(new_txion)
  # Because the transaction was successfully
  # submitted, we log it to our console
  print("New transaction")
  print(("FROM: {}".format(new_txion['from'].encode('ascii','replace'))))
  print(("TO: {}".format(new_txion['to'].encode('ascii','replace'))))
  print(("AMOUNT: {}\n".format(new_txion['amount'])))
  # Then we let the client know it worked out
  return "Transaction submission successful\n"

@node.route('/blocks', methods=['GET'])
def get_blocks():
  chain_to_send = blockchain
  # Convert our blocks into dictionaries
  # so we can send them as json objects later
  for i in range(len(chain_to_send)):
    block = chain_to_send[i]
    block_index = str(block.index)
    block_timestamp = str(block.timestamp)
    block_data = str(block.data)
    block_hash = block.hash
    chain_to_send[i] = {
      "index": block_index,
      "timestamp": block_timestamp,
      "data": block_data,
      "hash": block_hash
    }
  chain_to_send = json.dumps(chain_to_send)
  return chain_to_send

def find_new_chains():
  # Get the blockchains of every
  # other node
  other_chains = []
  for node_url in peer_nodes:
    # Get their chains using a GET request
    block = requests.get(node_url + "/blocks").content
    # Convert the JSON object to a Python dictionary
    block = json.loads(block)
    # Add it to our list
    other_chains.append(block)
  return other_chains

def consensus():
  # Get the blocks from other nodes
  other_chains = find_new_chains()
  # If our chain isn't longest,
  # then we store the longest chain
  longest_chain = blockchain
  for chain in other_chains:
    if len(longest_chain) < len(chain):
      longest_chain = chain
  # If the longest chain isn't ours,
  # then we stop mining and set
  # our chain to the longest one
  blockchain = longest_chain

def proof_of_work(last_proof):
  # Create a variable that we will use to find
  # our next proof of work
  incrementor = last_proof + 1
  # Keep incrementing the incrementor until
  # it's equal to a number divisible by 9
  # and the proof of work of the previous
  # block in the chain
  while not (incrementor % 9 == 0 and incrementor % last_proof == 0):
    incrementor += 1
  # Once that number is found,
  # we can return it as a proof
  # of our work
  return incrementor

@node.route('/mine', methods = ['GET'])
def mine():
  # Get the last proof of work
  last_block = blockchain[len(blockchain) - 1]
  last_proof = last_block.data['proof-of-work']
  # Find the proof of work for
  # the current block being mined
  # Note: The program will hang here until a new
  #       proof of work is found
  proof = proof_of_work(last_proof)
  # Once we find a valid proof of work,
  # we know we can mine a block so 
  # we reward the miner by adding a transaction
  this_nodes_transactions.append(
    { "from": "network", "to": miner_address, "amount": 1 }
  )
  # Now we can gather the data needed
  # to create the new block
  new_block_data = {
    "proof-of-work": proof,
    "transactions": list(this_nodes_transactions)
  }
  new_block_index = last_block.index + 1
  new_block_timestamp = this_timestamp = date.datetime.now()
  last_block_hash = last_block.hash
  # Empty transaction list
  this_nodes_transactions[:] = []
  # Now create the
  # new block!
  mined_block = Block(
    new_block_index,
    new_block_timestamp,
    new_block_data,
    last_block_hash
  )
  blockchain.append(mined_block)
  # Let the client know we mined a block
  return json.dumps({
      "index": new_block_index,
      "timestamp": str(new_block_timestamp),
      "data": new_block_data,
      "hash": last_block_hash
  }) + "\n"

node.run()
anthonypaolantonio@Anthonys-MBP-4 lesson10 % python3 snakecoin-server-full-code.py
Traceback (most recent call last):
  File "/Users/anthonypaolantonio/iot/lesson10/snakecoin-server-full-code.py", line 4, in <module>
    from flask import Flask
ModuleNotFoundError: No module named 'flask'
anthonypaolantonio@Anthonys-MBP-4 lesson10 % cd
anthonypaolantonio@Anthonys-MBP-4 ~ % sudo pip3 install markupsafe==2.0.1
Password:
WARNING: The directory '/Users/anthonypaolantonio/Library/Caches/pip' or its parent directory is not owned or is not writable by the current user. The cache has been disabled. Check the permissions and owner of that directory. If executing pip with sudo, you should use sudo's -H flag.
Collecting markupsafe==2.0.1
  Downloading MarkupSafe-2.0.1-cp38-cp38-macosx_10_9_x86_64.whl (13 kB)
Installing collected packages: markupsafe
  Attempting uninstall: markupsafe
    Found existing installation: MarkupSafe 2.1.1
    Uninstalling MarkupSafe-2.1.1:
      Successfully uninstalled MarkupSafe-2.1.1
Successfully installed markupsafe-2.0.1
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
anthonypaolantonio@Anthonys-MBP-4 ~ % python3 snakecoin-server-full-code.py
/usr/local/bin/python3: can't open file '/Users/anthonypaolantonio/snakecoin-server-full-code.py': [Errno 2] No such file or directory
anthonypaolantonio@Anthonys-MBP-4 ~ % curl "localhost:5000/txion" \
     -H "Content-Type: application/json" \
     -d '{"from": "akjflw", "to":"fjlakdj", "amount": 3}'
curl: (7) Failed to connect to localhost port 5000: Connection refused
anthonypaolantonio@Anthonys-MBP-4 ~ % curl "localhost:5000/txion" \
> -H "Content-Type: application/json" \
> -d '{"from": "akjflw", "to":"fjlakdj", "amount": 3}'
curl: (7) Failed to connect to localhost port 5000: Connection refused
anthonypaolantonio@Anthonys-MBP-4 ~ % curl localhost:5000/mine
curl: (7) Failed to connect to localhost port 5000: Connection refused
anthonypaolantonio@Anthonys-MBP-4 ~ % sudo pip3 install pyota[ccurl]
zsh: no matches found: pyota[ccurl]
anthonypaolantonio@Anthonys-MBP-4 ~ % sudo pip3 install 'pyota[ccurl]'
WARNING: The directory '/Users/anthonypaolantonio/Library/Caches/pip' or its parent directory is not owned or is not writable by the current user. The cache has been disabled. Check the permissions and owner of that directory. If executing pip with sudo, you should use sudo's -H flag.
Collecting pyota[ccurl]
  Downloading PyOTA-2.1.0-py2.py3-none-any.whl (113 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 113.9/113.9 kB 14.4 MB/s eta 0:00:00
Requirement already satisfied: requests[security]>=2.4.1 in /Library/Python/3.8/site-packages (from pyota[ccurl]) (2.27.1)
Collecting phx-filters
  Downloading phx_filters-2.0.2-py3-none-any.whl (35 kB)
Collecting pysha3
  Downloading pysha3-1.0.2.tar.gz (829 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 829.2/829.2 kB 19.0 MB/s eta 0:00:00
  Preparing metadata (setup.py) ... done
Requirement already satisfied: six in /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/site-packages (from pyota[ccurl]) (1.15.0)
Collecting pyota-ccurl
  Downloading PyOTA-CCurl-1.0.9.tar.gz (5.8 kB)
  Preparing metadata (setup.py) ... done
Requirement already satisfied: certifi>=2017.4.17 in /Library/Python/3.8/site-packages (from requests[security]>=2.4.1->pyota[ccurl]) (2021.10.8)
Requirement already satisfied: charset-normalizer~=2.0.0 in /Library/Python/3.8/site-packages (from requests[security]>=2.4.1->pyota[ccurl]) (2.0.12)
Requirement already satisfied: urllib3<1.27,>=1.21.1 in /Library/Python/3.8/site-packages (from requests[security]>=2.4.1->pyota[ccurl]) (1.26.9)
Requirement already satisfied: idna<4,>=2.5 in /Library/Python/3.8/site-packages (from requests[security]>=2.4.1->pyota[ccurl]) (3.3)
Collecting phx-class-registry
  Downloading phx_class_registry-3.0.5-py3-none-any.whl (11 kB)
Requirement already satisfied: python-dateutil in ./Library/Python/3.8/lib/python/site-packages (from phx-filters->pyota[ccurl]) (2.8.2)
Requirement already satisfied: pytz in ./Library/Python/3.8/lib/python/site-packages (from phx-filters->pyota[ccurl]) (2022.1)
Collecting regex>=2018.8.17
  Downloading regex-2022.4.24-cp38-cp38-macosx_10_9_x86_64.whl (289 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 289.1/289.1 kB 37.2 MB/s eta 0:00:00
Building wheels for collected packages: pyota-ccurl, pysha3
  Building wheel for pyota-ccurl (setup.py) ... done
  Created wheel for pyota-ccurl: filename=PyOTA_CCurl-1.0.9-cp38-cp38-macosx_10_14_x86_64.whl size=10189 sha256=212d39128532697a0f89a16e6997988138cbe422ac1fda4e6a3ee6e86cc5cab2
  Stored in directory: /private/tmp/pip-ephem-wheel-cache-hqrru9a_/wheels/cd/0e/11/25d0e2d056ef7fd94e87b82685ccc91cb60a64a44ca7944259
  Building wheel for pysha3 (setup.py) ... done
  Created wheel for pysha3: filename=pysha3-1.0.2-cp38-cp38-macosx_10_14_x86_64.whl size=86392 sha256=d83209eb3024d6ce15cd982f6a88309af4aa2a2570211e4563fc94e37aad350a
  Stored in directory: /private/tmp/pip-ephem-wheel-cache-hqrru9a_/wheels/ee/35/47/386d23587167a3b03fc702b6be1ff60c92fddbeef125873088
Successfully built pyota-ccurl pysha3
Installing collected packages: pysha3, phx-class-registry, regex, phx-filters, pyota, pyota-ccurl
Successfully installed phx-class-registry-3.0.5 phx-filters-2.0.2 pyota-2.1.0 pyota-ccurl-1.0.9 pysha3-1.0.2 regex-2022.4.24
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
anthonypaolantonio@Anthonys-MBP-4 ~ % cd ~/iot/lesson10
anthonypaolantonio@Anthonys-MBP-4 lesson10 % cat iri_node_info.py
from iota import Iota

# Create a new instance of the IOTA API object
# Specify which node to connect to
api = Iota(adapter = 'https://nodes.devnet.iota.org:443')

# Call the `get_node_info()` method for information about the node and the Tangle
response = api.get_node_info()

print(response)
anthonypaolantonio@Anthonys-MBP-4 lesson10 % python3 iri_node_info.py
Traceback (most recent call last):
  File "/Users/anthonypaolantonio/iot/lesson10/iri_node_info.py", line 1, in <module>
    from iota import Iota
ModuleNotFoundError: No module named 'iota'
anthonypaolantonio@Anthonys-MBP-4 lesson10 % pip3 install iota
Defaulting to user installation because normal site-packages is not writeable
Collecting iota
  Downloading iota-1.4.20-py2.py3-none-any.whl (186 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 186.6/186.6 kB 6.2 MB/s eta 0:00:00
Collecting wxpython
  Downloading wxPython-4.1.1-cp38-cp38-macosx_10_9_x86_64.whl (18.1 MB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 18.1/18.1 MB 39.0 MB/s eta 0:00:00
Requirement already satisfied: six in /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/site-packages (from iota) (1.15.0)
Requirement already satisfied: numpy in /Users/anthonypaolantonio/Library/Python/3.8/lib/python/site-packages (from iota) (1.22.3)
Requirement already satisfied: matplotlib in /Users/anthonypaolantonio/Library/Python/3.8/lib/python/site-packages (from iota) (3.5.2)
Requirement already satisfied: pillow>=6.2.0 in /Users/anthonypaolantonio/Library/Python/3.8/lib/python/site-packages (from matplotlib->iota) (9.1.0)
Requirement already satisfied: pyparsing>=2.2.1 in /Library/Python/3.8/site-packages (from matplotlib->iota) (3.0.9)
Requirement already satisfied: packaging>=20.0 in /Users/anthonypaolantonio/Library/Python/3.8/lib/python/site-packages (from matplotlib->iota) (21.3)
Requirement already satisfied: cycler>=0.10 in /Users/anthonypaolantonio/Library/Python/3.8/lib/python/site-packages (from matplotlib->iota) (0.11.0)
Requirement already satisfied: kiwisolver>=1.0.1 in /Users/anthonypaolantonio/Library/Python/3.8/lib/python/site-packages (from matplotlib->iota) (1.4.2)
Requirement already satisfied: fonttools>=4.22.0 in /Users/anthonypaolantonio/Library/Python/3.8/lib/python/site-packages (from matplotlib->iota) (4.33.3)
Requirement already satisfied: python-dateutil>=2.7 in /Users/anthonypaolantonio/Library/Python/3.8/lib/python/site-packages (from matplotlib->iota) (2.8.2)
Installing collected packages: wxpython, iota
  WARNING: The scripts helpviewer, img2png, img2py, img2xpm, pycrust, pyshell, pyslices, pyslicesshell, pywxrc, wxdemo, wxdocs and wxget are installed in '/Users/anthonypaolantonio/Library/Python/3.8/bin' which is not on PATH.
  Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.
  NOTE: The current PATH contains path(s) starting with `~`, which may not be expanded by all applications.
  WARNING: The scripts iota, iota.filter_pickles, iota.run, iota.single_image and iota.track_images are installed in '/Users/anthonypaolantonio/Library/Python/3.8/bin' which is not on PATH.
  Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.
  NOTE: The current PATH contains path(s) starting with `~`, which may not be expanded by all applications.
Successfully installed iota-1.4.20 wxpython-4.1.1
anthonypaolantonio@Anthonys-MBP-4 lesson10 % python3 iri_node_info.py
Traceback (most recent call last):
  File "/Users/anthonypaolantonio/iot/lesson10/iri_node_info.py", line 1, in <module>
    from iota import Iota
ModuleNotFoundError: No module named 'iota'
anthonypaolantonio@Anthonys-MBP-4 lesson10 % 
